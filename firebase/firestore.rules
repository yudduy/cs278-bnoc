rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    /* ── helpers ── */
    function isSignedIn() {
      return request.auth != null;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function getFirestoreData(path) {
      return firestore.exists(path)
        ? firestore.get(path).data
        : null;
    }
    function isPairingParticipant(pairingId) {
      let p = getFirestoreData("/databases/(default)/documents/pairings/" + pairingId);
      return p != null && p.users is list && request.auth.uid in p.users;
    }

    /* ── storage rules ── */

    // user photos
    match /photos/{userId}/{fileName=**} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    // profile pictures
    match /users/{userId}/profile.jpg {
      allow read : if isSignedIn();
      allow write: if isOwner(userId);
    }

    // pairing images
    match /pairings/{pairingId}/{userId}.jpg {
      allow read: if isSignedIn() && (
                   isPairingParticipant(pairingId) ||
                   (let p = getFirestoreData("/databases/(default)/documents/pairings/" + pairingId);
                    p != null && p.isPrivate == false)
                 );
      allow write: if isSignedIn()
                   && isPairingParticipant(pairingId)
                   && isOwner(userId);
    }

    // chat images
    match /chats/{chatId}/{messageId}.jpg {
      allow read, write: if isSignedIn() && (
        let c = getFirestoreData("/databases/(default)/documents/chatRooms/" + chatId);
        c != null && c.userIds is list && request.auth.uid in c.userIds
      );
    }

    // deny everything else
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
