rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    /* ── helpers ── */
    function isSignedIn()         { return request.auth != null; }
    function isOwner(uid)         { return request.auth.uid == uid; }

    function getFirestoreData(p) {
      return firestore.exists(p) ? firestore.get(p).data : null;
    }

    // participants & visibility --------------------------------------------
    function isPairingParticipant(pairingId) {
      let d = getFirestoreData("/databases/(default)/documents/pairings/" + pairingId);
      return d != null && d.users is list && request.auth.uid in d.users;
    }

    function isPairingPublic(pairingId) {
      let d = getFirestoreData("/databases/(default)/documents/pairings/" + pairingId);
      return d != null && d.isPrivate == false;
    }

    function isChatParticipant(chatId) {
      let d = getFirestoreData("/databases/(default)/documents/chatRooms/" + chatId);
      return d != null && d.userIds is list && request.auth.uid in d.userIds;
    }

    /* ── storage rules ── */

    // user photos -----------------------------------------------------------
    match /photos/{userId}/{fileName=**} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }

    // profile pictures ------------------------------------------------------
    match /users/{userId}/profile.jpg {
      allow read : if isSignedIn();
      allow write: if isOwner(userId);
    }

    // pairing images --------------------------------------------------------
    match /pairings/{pairingId}/{userId}.jpg {
      allow read : if isSignedIn() &&
                    (isPairingParticipant(pairingId) || isPairingPublic(pairingId));
      allow write: if isSignedIn() &&
                    isPairingParticipant(pairingId) &&
                    isOwner(userId);
    }

    // chat images -----------------------------------------------------------
    match /chats/{chatId}/{messageId}.jpg {
      allow read, write: if isSignedIn() && isChatParticipant(chatId);
    }

    // fallback --------------------------------------------------------------
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
